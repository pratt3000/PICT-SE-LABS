%macro display 2
	mov rax,1
	mov rdi,1
	mov rsi,%1
	mov rdx,%2
	syscall
	%endmacro
%macro scall 4
	mov rax,%1
	mov rdi,%2
	mov rsi,%3
	mov rdx,%4
	syscall
%endmacro
section .bss
answer resb 5

section .data
	array1 : db 1,2,3,4,5,6,7,8
	len1 equ $-array1
	array2 : db 0,0,0,0,0,0,0,0
	len2  equ $-array2
	array3 : db 1,2,3,4,5,6,7,8,0,0,0,0,0,0,0,0
	len3 equ $-array3
	msg1 db 'Non Ovrelapping'
	c1 equ $-msg1
	msg2 db 'Overlapping'
	c2 equ $-msg2
	msg3 db 'Without String Instructions:'
	c3 equ $-msg3
	msg4 db 'With String Instructions:'
	c4 equ $-msg4
	msg5 db 'Adress before Operation'
	c5 equ $-msg5
	msg6 db 'Address after Operation'
	c6 equ $-msg6
	newline db ' ',10
	newlen equ $- newline
section .text
global _start
_start:

;Non Overlapping without string operation
	display msg3,c3
	display newline,newlen
	display msg1,c1
	display newline,newlen
	display msg4,c4
	display newline,newlen
	mov rax,array1
	call display1
	xor rax,rax
	mov rsi,array1
	add rsi,len1
	mov rdi,array2
	mov rdx,len2
loop1:
	mov al,byte[rdi]
	mov byte[rsi],al
	inc rsi
	inc rdi
	dec rdx
	jnz loop1
display string1,len1+len2
display newline,newlen	
	display msg5,c5
	display newline,newlen
	xor rax,rax
	mov rax,string1
	call display1	
	xor rax,rax

;Overlapping Without String Operation

display msg2,c2
display newline,newlen
	mov rsi,string3
	mov rdi,string4
	mov rdx,len4

loop2:
	mov al,byte[rdi]
	mov byte[rsi],al
	inc rsi
	inc rdi
	dec rdx
	jnz loop2

display string3,len3
display newline,newlen
display msg4,c4
display newline,newlen

;Overlapping With string operation 
mov rsi,string2
mov rdi,string1
mov rcx,len2

cld 
rep movsb
display string1,len1 
display newline,newlen

exit:
mov rax,60
mov rdx,0
syscall


display1:
	mov rsi,answer+15
	mov rcx,10

again:
	mov rdx,0
	mov rbx,16
	div rbx
	cmp dl,09h
	jbe skip
	add dl,07h
skip:	
	add dl,30h
	mov [rsi],dl
	dec rsi
	dec rcx
	jnz again
	scall 1,1,answer,16
	ret 
