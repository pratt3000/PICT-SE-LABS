%macro display 2
	mov rax,1
	mov rdi,1
	mov rsi,%1
	mov rdx,%2
	syscall
	%endmacro
%macro scall 4
	mov rax,%1
	mov rdi,%2
	mov rsi,%3
	mov rdx,%4
	syscall
%endmacro

sourcedisplay:
	mov rsi, array1
	mov rbx, 08
lp1:	mov rax, rsi
	push rsi
	push rbx
	;display space, 1
	call displayrax
	display space, 1
	pop rbx
	pop rsi
	mov rax, [rsi]
	push rsi
	push rbx
	call displayrax
	display newline, 1
	pop rbx
	pop rsi
	add rsi,08
	dec rbx
	jnz lp1
	ret
	
destinationdisplay:
	mov rsi, array2
	mov rbx, 08
lp2:	mov rax, rsi
	push rsi
	push rbx
	;display space, 1
	call displayrax
	display space, 1
	pop rbx
	pop rsi

	mov rax, [rsi]
	push rsi
	push rbx
	call displayrax
	display newline, 1
	pop rbx
	pop rsi
	add rsi,08
	dec rbx
	jnz lp2
	ret	

overlapdisplay:
	mov rsi, array3
	mov rbx, 16
lp3:	mov rax, [rsi]
	push rsi
	push rbx
	call displayrax
	display space, 1
	pop rbx
	pop rsi
	
	mov rax, rsi
	push rsi
	push rbx
	;display space, 1
	call displayrax
	display space, 1
	pop rbx
	pop rsi
	add rsi,08
	dec rbx
	jnz lp3
	ret


section .bss
answer resb 5

section .data
	array1 : db 31h,32h,33h,34h,35h,36h,37h,38h
	len1 equ $-array1
	array2 : db 30h,30h,30h,30h,30h,30h,30h,30h
	len2  equ $-array2
	array3 : db 31h,32h,33h,34h,35h,36h,37h,38h,30h,30h,30h,30h,30h,30h,30h,30h
	len3 equ $-array3
	msg1 db 'Non Ovrelapping'
	c1 equ $-msg1
	msg2 db 'Overlapping'
	c2 equ $-msg2
	msg3 db 'Without String Instructions:'
	c3 equ $-msg3
	msg4 db 'With String Instructions:'
	c4 equ $-msg4
	msg5 db 'Adress before Operation'
	c5 equ $-msg5
	msg6 db 'Address after Operation'
	c6 equ $-msg6
	srcblk db 'Source Block'
	srcblklen equ $-srcblk
	dstblk db 'Destination Block'
	dstblklen equ $-dstblk
	newline db ' ',10
	newlen equ $- newline
space db ' '
section .text
global _start
_start:

;Non Overlapping without string operation
	display msg3,c3
	display newline,newlen
	display msg1,c1
	display newline,newlen
	mov rax,array1
	xor rax,rax
	mov rsi,array2
	mov rdi,array1
	mov rdx,len1
loop1:
	mov al,byte[rdi]
	mov byte[rsi],al
	inc rsi
	inc rdi
	dec rdx
	jnz loop1
display srcblk,srcblklen
display space,1
call sourcedisplay
display newline,newlen
display dstblk,dstblklen
display space,1
call destinationdisplay
display newline,newlen

	xor rax,rax
	mov rsi,array3
	mov rdi,rsi
	add rdi,08
	mov rdx,08
l1:	mov rax,[rsi]
	mov [rdi],rax
	inc rsi
	inc rdi
	dec rdx
	jnz l1
display newline,newlen
call overlapdisplay



exit:
mov rax,60
mov rdx,0
syscall

displayrax:
    mov rcx, space1
    mov rbx, 0
    mov [rcx], rbx
    inc rcx
    mov [spacepos], rcx
 
displayraxLoop:
    mov rdx, 0
    mov rbx, 10
    div rbx
    push rax
    add rdx,48
 
    mov rcx, [spacepos]
    mov [rcx], dl
    inc rcx
    mov [spacepos], rcx
   
    pop rax
    cmp rax, 0
    jne displayraxLoop
 
displayraxLoop2:
    mov rcx, [spacepos]
 
    mov rax, 1
    mov rdi, 1
    mov rsi, rcx
    mov rdx, 1
    syscall
 
    mov rcx, [spacepos]
    dec rcx
    mov [spacepos], rcx
 
    cmp rcx,space1
    jge displayraxLoop2
 
    ret
section .bss
    space1 resb 100
    spacepos resb 8	
