%macro message 2
		mov rax, 01
		mov rdi, 01
		mov rsi, %1
		mov rdx, %2
		syscall
%endmacro

%macro display 2		
		mov rax, 01
		mov rdi, 01
		mov rsi, %1
		mov rdx, %2
		syscall	
%endmacro
	
copyAhead:
		mov rbx, [rax]
		inc rax
		inc rbx
		ret

sourcedisplay:
	mov rsi, source
	mov rbx, 08
lp1:	mov rax, rsi
	push rsi
	push rbx
	;display space, 1
	call displayrax
	display space, 1
	pop rbx
	pop rsi
	mov rax, [rsi]
	push rsi
	push rbx
	call displayrax
	display newline, 1
	pop rbx
	pop rsi
	add rsi,08
	dec rbx
	jnz lp1
	ret
	
destinationdisplay:
	mov rsi, destn
	mov rbx, 08
lp2:	mov rax, rsi
	push rsi
	push rbx
	;display space, 1
	call displayrax
	display space, 1
	pop rbx
	pop rsi

	mov rax, [rsi]
	push rsi
	push rbx
	call displayrax
	display newline, 1
	pop rbx
	pop rsi
	add rsi,08
	dec rbx
	jnz lp2
	ret	

overlapdisplay:
	mov rsi, overlap
	mov rbx, 16
lp3:	mov rax, [rsi]
	push rsi
	push rbx
	call displayrax
	display space, 1
	pop rbx
	pop rsi
	
	mov rax, rsi
	push rsi
	push rbx
	;display space, 1
	call displayrax
	display space, 1
	pop rbx
	pop rsi
	add rsi,08
	dec rbx
	jnz lp3
	ret


section .data
	overlap dq 1,2,3,4,5,6,7,8,0,0,0,0,0,0,0,0
	overlaplen equ $ - overlap
	source dq 1,2,3,4,5,6,7,8
	arraylen equ $ - source	
	destn dq 0,0,0,0,0,0,0,0
msg1 db 'Non Ovrelapping'
	c1 equ $-msg1
	msg2 db 'Overlapping'
	c2 equ $-msg2
	msg3 db 'Without String Instructions:'
	c3 equ $-msg3
	msg4 db 'With String Instructions:'
	c4 equ $-msg4	
	sourcemsg: db "Source block : "
	sourcemsglen: equ $ -sourcemsg
	destnmsg: db "Destination block : "	
	destnmsglen: equ $ -destnmsg
	srcadd: db "SRC block base address : "	
	srcaddmsglen: equ $ -srcadd
	dstadd: db "DST block base address: "	
	dstaddmsglen: equ $ -dstadd
	beforeovrlap: db "Before Over lapping :"	
	beforeovrlaplen: equ $ -beforeovrlap
	afterovrlap: db "After Over lapping :"	
	afterovrlaplen: equ $ -afterovrlap
	newline: db 10
	newlen equ $-newline
	space: db " "

section .text
global _start 
_start:
		;mov rsi, arraylen
		;message sourcemsg, sourcemsglen
		;call sourcedisplay
		;display newline, 1
		;message destnmsg, destnmsglen
		;call destinationdisplay
		;display newline, 1
		
	;	mov rsi, source
	;	mov rdi, destn
	;	mov rdx, 08
l:	;mov rax, [rsi]
	;	mov [rdi], rax
	;	add rsi,08	
	;	add rdi,08
	;	dec rdx
	;	jnz l
;
;		message sourcemsg, sourcemsglen
;		call sourcedisplay
;		display newline, 1
;		message destnmsg, destnmsglen
;		call destinationdisplay
;		display newline, 1
;
;		message srcadd, srcaddmsglen
;		mov rax, source		
;		call displayrax
;		display newline, 1
;		message dstadd, dstaddmsglen
;		mov rax, destn
;		call displayrax
;		display newline, 1
		;-------------------------------------------------
		;overlapping
		;-------------------------------------------------
		message beforeovrlap, beforeovrlaplen
		call overlapdisplay
		display newline, 1
		mov rsi, overlap
		mov rcx, 08
		mov rdi, rsi
		add rdi,64
label:	mov rax, [rsi]
		mov [rdi], rax
		add rsi,08
		add rdi,08
		dec rcx
		jnz label
		
		message afterovrlap, afterovrlaplen
		call overlapdisplay
		display newline, 1

label1:  ;* with string operations
	display msg4,c4
	display newline,newlen
	
	mov rsi,source
	mov rdi,destn
	mov rcx,08

	cld 
	rep movsq

	display sourcemsg,sourcemsglen
	call sourcedisplay
	display newline,newlen
	display destnmsg,destnmsglen
	call destinationdisplay
	display newline,newlen

	
		mov rax, 60
		mov rdi, 0
		syscall
; hex to ascii
displayrax:
    mov rcx, space1
    mov rbx, 0
    mov [rcx], rbx
    inc rcx
    mov [spacepos], rcx
 
displayraxLoop:
    mov rdx, 0
    mov rbx, 10
    div rbx
    push rax
    add rdx,48
 
    mov rcx, [spacepos]
    mov [rcx], dl
    inc rcx
    mov [spacepos], rcx
   
    pop rax
    cmp rax, 0
    jne displayraxLoop
 
displayraxLoop2:
    mov rcx, [spacepos]
 
    mov rax, 1
    mov rdi, 1
    mov rsi, rcx
    mov rdx, 1
    syscall
 
    mov rcx, [spacepos]
    dec rcx
    mov [spacepos], rcx
 
    cmp rcx,space1
    jge displayraxLoop2
 
    ret
section .bss
    space1 resb 100
    spacepos resb 8	
